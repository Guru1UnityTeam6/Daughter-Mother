using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class bear_Move : MonoBehaviour
{
    //에너미 상태 함수
    enum EnemyState
    {
        Idle,
        Move,
        Attack,
        Damaged,
        Die
    }

    //에너미 상태 변수
    EnemyState m_state;

    //플레이어 발견 범위
    public float findDistance = 20f;
    //플레이어 트랜스폼
    Transform player;

    //공격가능 범위
    public float attackDistance = 0.1f;
    //이동속도
    public float moveSpeed = 6f;
    //케릭터 콘트롤러 컴포넌트
    CharacterController cc;

    //누적시간
    float currentTime = 0;
    //공격딜레이 시간
    float attackDelay = 2f;
    //에너미 공격력
    public int attackPower = 3;
    //곰인형의 체력변수
    public int hp = 30;



    // Start is called before the first frame update
    void Start()
    {
        //최초의 에너미 상태는 대기로 한다.
        m_state = EnemyState.Idle;
        //플레이어의 트랜스폼 컴포넌트 받아오기
        player = GameObject.Find("Player").transform;

        //캐릭터 콘트롤러 컴포넌트 받아오기
        cc = GetComponent<CharacterController>();
        
    }

    void Idle()
    {
        //만일, 플레이어와의 거리가 액션 시작 범위 이내라면 Move 상태로 전환한다.
        if(Vector3.Distance(transform.position, player.position) < findDistance)
        {
            m_state = EnemyState.Move;
            print("상태전환:Idle->Move");
        }
    }

    void Move()
    {
        //만일 플레이어와의 거리가 공격범위 밖이라면 플레이어를 향해 이동한다.
        if(Vector3.Distance(transform.position, player.position) > attackDistance)
        {
            //이동 방향 설정
            Vector3 dir = (player.position - transform.position).normalized;
            //캐릭터 콘트롤러를 이용해 이동하기
            cc.Move(dir * moveSpeed * Time.deltaTime);
        }
        //그렇지않으면, 현재 상태를 공격(Attack)으로 전환한다.
        else
        {
            m_state = EnemyState.Attack;
            print("상태 전환: Move -> Attack");
        }
    }

    void Attack()
    {
        //만일 플레이어가 공격범위 이내에 있다면 플레이어를 공격한다
        if(Vector3.Distance(transform.position, player.position) < attackDistance)
        {
            //일정시간마다 플레이어를 공격한다
            currentTime += Time.deltaTime;
            if(currentTime > attackDelay)
            {
                player.GetComponent<PlayerMove>().DamageAction(attackPower);
                print("공격");
                currentTime = 0;
            }
        }
        //그렇지 않다면, 현재의 상태를 이동(Move)로 전환한다(재추격실시)
        else
        {
            m_state = EnemyState.Move;
            print("상태 전환: Attack -> Move");
            //누적 시간을 공격 딜레이 시간만큼 진행시켜 놓는다.
            currentTime = attackDelay;
        }
    }

    void Damaged()
    {
        //피격 상태를 처리하기 위한 코루틴을 실행한다.
        StartCoroutine(DamageProcess());
    }
    //데미지 처리용 코루틴 함수
    IEnumerator DamageProcess()
    {
        //피격 모션 시간만큼 기다린다.
        yield return new WaitForSeconds(0.5f);

        //현재 상태를 이동상태로 전환한다.
        m_state = EnemyState.Move;
        print("상태 전환: Damaged-> Move");
    }
    //데미지 실행함수
    public void HitEnemy(int hitPower)
    {
        //플레이어의 공격력만큼 에너미의 체력을 감소시킨다.
        hp -= hitPower;

        //에너미의 체력이 0보다 크면 피격상태로 전환한다.
        if (hp > 0)
        {
            m_state = EnemyState.Damaged;
            print("상태전환: Any state -> Damaged");
            Damaged();
        }
        //그렇지않다면 죽음 상태로 전환한다.
        else
        {
            m_state = EnemyState.Die;
            print("상태전환: Any state -> Die");
            Die();
        }
    }

    //죽음 상태 함수
    void Die()
    {
        //진행 중인 피격 코루틴을 중지한다.
        StopAllCoroutines();

        //죽음 상태를 처리하기 위한 코루틴을 실행한다.
        StartCoroutine(DieProcess());
    }

    IEnumerator DieProcess()
    {
        //캐릭터 콘트롤러 컴포넌트를 비활성화시킨다.
        cc.enabled = false;

        //2초동안 기다린 후에 자기자신을 제거한다
        yield return new WaitForSeconds(2f);
        print("소멸!");
    }

    /*void OnTriggerEnter(Collider other)
    //rigidBody가 무언가와 충돌할때 호출되는 함수 입니다.
    //Collider other로 부딪힌 객체를 받아옵니다.
    //에너미와 플레이어가 충돌한다면 Hp가 깎이도록 설정
    {
        if (other.gameObject.tag.Equals("Player"))
        //부딪힌 객체의 태그를 비교해서 플레이어인지 판단합니다.
        {
            hp -= attackPower;
        }
    }*/

    // Update is called once per frame
    void Update()
    {
        //현재 상태를 체크해 해당 상태별로 정해진 기능을 수행하게 하고 싶다.
        switch (m_state)
        {
            case EnemyState.Idle:
                Idle();
                break;
            case EnemyState.Move:
                Move();
                break;
            case EnemyState.Attack:
                Attack();
                break;
            case EnemyState.Damaged:
                Damaged();
                break;
            case EnemyState.Die:
                Die();
                break;
        }
    }
}
